{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/avi/react development/react-native/Mobile UI/flashbytes/globalFont.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Font from \"expo-font\";\n\nvar GlobalFont = function (_React$Component) {\n  _inherits(GlobalFont, _React$Component);\n\n  var _super = _createSuper(GlobalFont);\n\n  function GlobalFont() {\n    var _this;\n\n    _classCallCheck(this, GlobalFont);\n\n    _this = _super.call(this);\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(GlobalFont, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                font1: require(\"./assets/fonts/font1.ttf\"),\n                font2: \"https://rsms.me/inter/font-files/Inter-SemiBoldItalic.otf?v=3.12\"\n              }));\n\n            case 3:\n              this.setState({\n                fontsLoaded: true\n              });\n              console.log(\"loaded\");\n              _context.next = 9;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 7]], Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.fontsLoaded ? React.createElement(View, {\n        style: {\n          fontFamily: \"font1\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }) : React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, \"Loading Assets...\"));\n    }\n  }]);\n\n  return GlobalFont;\n}(React.Component);\n\nexport { GlobalFont as default };","map":{"version":3,"sources":["/home/avi/react development/react-native/Mobile UI/flashbytes/globalFont.js"],"names":["React","Font","GlobalFont","state","fontsLoaded","loadAsync","font1","require","font2","setState","console","log","fontFamily","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;IAEqBC,U;;;;;AACnB,wBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAFY;AAKb;;;;;;;;;;;+CAISH,IAAI,CAACI,SAAL,CAAe;AACnBC,gBAAAA,KAAK,EAAEC,OAAO,4BADK;AAEnBC,gBAAAA,KAAK,EACH;AAHiB,eAAf,C;;;AAMN,mBAAKC,QAAL,CAAc;AAAEL,gBAAAA,WAAW,EAAE;AAAf,eAAd;AAEAM,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;;;;;;;;;;;;;;;;6BAMK;AACP,aAAO,KAAKR,KAAL,CAAWC,WAAX,GACL,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEQ,UAAAA,UAAU,EAAE;AAAd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK,GAGL,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CAHF;AAOD;;;;EAhCqCZ,KAAK,CAACa,S;;SAAzBX,U","sourcesContent":["import React from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport * as Font from \"expo-font\";\n\nexport default class GlobalFont extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      fontsLoaded: false,\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      await Font.loadAsync({\n        font1: require(\"./assets/fonts/font1.ttf\"),\n        font2:\n          \"https://rsms.me/inter/font-files/Inter-SemiBoldItalic.otf?v=3.12\",\n      });\n\n      this.setState({ fontsLoaded: true });\n      // alert(\"fonts are loaded\");\n      console.log(\"loaded\");\n    } catch (error) {\n      // alert(error);\n    }\n  }\n\n  render() {\n    return this.state.fontsLoaded ? (\n      <View style={{ fontFamily: \"font1\" }}></View>\n    ) : (\n      <View>\n        <Text>Loading Assets...</Text>\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}